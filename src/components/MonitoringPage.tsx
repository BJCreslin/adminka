import { useState, useEffect } from 'react'

const MonitoringIcon = () => (
  <svg width="32" height="32" viewBox="0 0 24 24" fill="currentColor" className="text-yellow-500">
    <path d="M3 13H7V23H3V13ZM10 9H14V23H10V9ZM17 5H21V23H17V5Z"/>
  </svg>
)

interface ServerStatus {
  status: 'UP' | 'DOWN' | 'OUT_OF_SERVICE' | 'UNKNOWN' | 'UNAVAILABLE'
  timestamp?: string
  lastChecked: Date
}

const StatusCircle = ({ status }: { status: ServerStatus['status'] }) => {
  const getStatusColor = (status: ServerStatus['status']) => {
    switch (status) {
      case 'UP': return 'bg-green-500'
      case 'DOWN': return 'bg-red-500'
      case 'OUT_OF_SERVICE': return 'bg-orange-500'
      case 'UNKNOWN': return 'bg-gray-500'
      case 'UNAVAILABLE': return 'bg-red-600'
      default: return 'bg-gray-400'
    }
  }

  const getStatusText = (status: ServerStatus['status']) => {
    switch (status) {
      case 'UP': return '–†–∞–±–æ—Ç–∞–µ—Ç'
      case 'DOWN': return '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      case 'OUT_OF_SERVICE': return '–ù–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è'
      case 'UNKNOWN': return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
      case 'UNAVAILABLE': return '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    }
  }

  return (
    <div className="flex items-center gap-3">
      <div className={`w-4 h-4 rounded-full ${getStatusColor(status)} shadow-sm`}></div>
      <span className="font-medium text-gray-800">{getStatusText(status)}</span>
    </div>
  )
}

export default function MonitoringPage() {
  const [serverStatus, setServerStatus] = useState<ServerStatus>({
    status: 'UNKNOWN',
    lastChecked: new Date()
  })
  const [isChecking, setIsChecking] = useState(false)

  const checkServerHealth = async () => {
    setIsChecking(true)
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω
      const token = localStorage.getItem('jwt')
      
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), 10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      
      const response = await fetch('https://naidizakupku.ru/api/health', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        signal: controller.signal
      })
      
      clearTimeout(timeoutId)

      if (response.ok) {
        const data = await response.json()
        setServerStatus({
          status: data.status || 'UNKNOWN',
          timestamp: data.timestamp,
          lastChecked: new Date()
        })
      } else {
        setServerStatus({
          status: 'DOWN',
          lastChecked: new Date()
        })
      }
    } catch (error) {
      console.error('Health check failed:', error)
      setServerStatus({
        status: 'UNAVAILABLE',
        lastChecked: new Date()
      })
    } finally {
      setIsChecking(false)
    }
  }

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    checkServerHealth()
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª 60 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(checkServerHealth, 60000)
    
    return () => clearInterval(interval)
  }, [])

  const formatTime = (date: Date) => {
    try {
      if (!date || isNaN(date.getTime())) {
        return '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞'
      }
      return date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      })
    } catch {
      return '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã'
    }
  }

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center mb-4">
          <MonitoringIcon />
          <h1 className="text-2xl font-bold text-gray-900 ml-3">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞</h1>
        </div>
        
        <div className="bg-gradient-to-br from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-6">
          <div className="grid gap-6 md:grid-cols-2">
            
            {/* –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ */}
            <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-100">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-lg font-semibold text-gray-800">–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</h3>
                {isChecking && (
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500"></div>
                )}
              </div>
              
              <StatusCircle status={serverStatus.status} />
              
              <div className="mt-4 pt-4 border-t border-gray-100">
                <p className="text-sm text-gray-600">
                  –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: <span className="font-medium">{formatTime(serverStatus.lastChecked)}</span>
                </p>
                {serverStatus.timestamp && (
                  <p className="text-xs text-gray-500 mt-1">
                    –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ (UTC): {(() => {
                      try {
                        const date = new Date(serverStatus.timestamp)
                        return isNaN(date.getTime()) ? '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞' : date.toISOString()
                      } catch {
                        return '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞'
                      }
                    })()}
                  </p>
                )}
              </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ */}
            <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-100">
              <h3 className="text-lg font-semibold text-gray-800 mb-3">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</h3>
              
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</span>
                  <span className="font-medium">60 —Å–µ–∫—É–Ω–¥</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Endpoint:</span>
                  <span className="font-medium text-xs">api/health</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">–¢–∞–π–º–∞—É—Ç:</span>
                  <span className="font-medium">10 —Å–µ–∫—É–Ω–¥</span>
                </div>
              </div>

              <button
                onClick={checkServerHealth}
                disabled={isChecking}
                className="mt-4 w-full bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 text-white py-2 px-4 rounded-md text-sm font-medium transition-colors"
              >
                {isChecking ? '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å'}
              </button>
            </div>

          </div>

          {/* –ë—É–¥—É—â–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ */}
          <div className="mt-6 bg-white rounded-lg p-4 shadow-sm border border-gray-100">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
              <div className="p-3 bg-gray-50 rounded-lg">
                <div className="text-2xl text-gray-400">üìä</div>
                <p className="text-xs text-gray-600 mt-1">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</p>
              </div>
              <div className="p-3 bg-gray-50 rounded-lg">
                <div className="text-2xl text-gray-400">üíæ</div>
                <p className="text-xs text-gray-600 mt-1">–ü–∞–º—è—Ç—å</p>
              </div>
              <div className="p-3 bg-gray-50 rounded-lg">
                <div className="text-2xl text-gray-400">üîÑ</div>
                <p className="text-xs text-gray-600 mt-1">–ù–∞–≥—Ä—É–∑–∫–∞</p>
              </div>
              <div className="p-3 bg-gray-50 rounded-lg">
                <div className="text-2xl text-gray-400">üìã</div>
                <p className="text-xs text-gray-600 mt-1">–õ–æ–≥–∏</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 